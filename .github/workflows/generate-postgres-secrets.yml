name: Generate PostgreSQL Secrets

on:
  workflow_dispatch:
    inputs:
      postgres_deployment_type:
        description: "PostgreSQL deployment type"
        required: true
        default: "container"
        type: choice
        options:
          - container
          - external-node

jobs:
  generate-secrets:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ github.ref_name }}
    env:
      KUBECONFIG: ${{ github.workspace }}/.kube/config
      PATH: ${{ github.workspace }}/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      KUBECTL_PATH: ${{ github.workspace }}/.local/bin/kubectl
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup kubectl and kubeconfig
        if: github.event.inputs.postgres_deployment_type == 'external-node'
        env:
          KUBECONFIG_CONTENT: ${{ secrets.KUBECONFIG }}
        run: |
          # Create directories
          mkdir -p ${{ github.workspace }}/.local/bin
          mkdir -p ${{ github.workspace }}/.kube
          
          # Install kubectl
          curl -LO https://dl.k8s.io/release/v1.31.3/bin/linux/amd64/kubectl
          chmod +x kubectl
          mv ./kubectl ${{ github.workspace }}/.local/bin/kubectl
          
          # Setup kubeconfig
          echo "$KUBECONFIG_CONTENT" > ${{ github.workspace }}/.kube/config
          chmod 400 ${{ github.workspace }}/.kube/config
          
          # Add kubectl to GitHub PATH for subsequent steps
          echo "${{ github.workspace }}/.local/bin" >> $GITHUB_PATH
          
          # Export environment variables for immediate use
          echo "KUBECTL_PATH=${{ github.workspace }}/.local/bin/kubectl" >> $GITHUB_ENV
          
          # Verify installation
          ${{ github.workspace }}/.local/bin/kubectl version --client
          ${{ github.workspace }}/.local/bin/kubectl config view

      - name: Setup ufw firewall
        if: github.event.inputs.postgres_deployment_type == 'external-node'
        run: |
          sudo ufw enable
          sudo ufw allow ssh
          sudo ufw allow 51820/udp
          sudo ufw status  

      - name: Install WireGuard
        if: github.event.inputs.postgres_deployment_type == 'external-node'
        run: sudo apt-get install -y wireguard

      - name: Configure WireGuard
        if: github.event.inputs.postgres_deployment_type == 'external-node'
        run: |
          echo "${{ secrets.CLUSTER_WIREGUARD_WG0 }}" | sudo tee /etc/wireguard/wg0.conf

      - name: Start WireGuard
        if: github.event.inputs.postgres_deployment_type == 'external-node'
        run: |
          sudo chmod 600 /etc/wireguard/wg0.conf
          sudo chmod 700 /etc/wireguard/
          sudo chmod 644 /lib/systemd/system/wg-quick@.service
          sudo systemctl daemon-reload
          sudo wg-quick up wg0
          sudo wg show wg0

      - name: Check PostgreSQL deployment type
        run: |
          if [[ "${{ github.event.inputs.postgres_deployment_type }}" == "container" ]]; then
            echo "PostgreSQL is deployed as a container - no secrets generation needed"
            echo "Skipping secret generation for containerized PostgreSQL"
            echo "Container deployments handle secrets internally"
            exit 0
          else
            echo "PostgreSQL is deployed on external node - proceeding with secret generation"
            echo "External PostgreSQL requires manual secret management"
          fi

      - name: Generate and Apply PostgreSQL Secrets
        if: github.event.inputs.postgres_deployment_type == 'external-node'
        run: |
          chmod +x ./.github/scripts/generate-pg-secrets.sh
          ./.github/scripts/generate-pg-secrets.sh ${{ github.workspace }}/generated-secrets ${{ github.ref_name }} --apply
        env:
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
