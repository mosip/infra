#cloud-config
# Production RKE2 Cloud-Init Setup - No SSH Required
# This runs during instance boot, eliminating multi-AZ SSH issues

write_files:
  - path: /tmp/rke2-cloud-init-setup.sh
    permissions: '0755'
    content: |
      #!/bin/bash
      # Production RKE2 setup via Cloud-Init
      set -euo pipefail
      
      # Log everything
      exec > >(tee -a /var/log/rke2-cloud-init.log) 2>&1
      
      echo "=== RKE2 Cloud-Init Setup Started ==="
      echo "Node: $(hostname)"
      echo "Timestamp: $(date)"
      echo "AWS AZ: $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone 2>/dev/null || echo 'Unknown')"
      echo "Instance ID: $(curl -s http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null || echo 'Unknown')"
      echo "Private IP: $(curl -s http://169.254.169.254/latest/meta-data/local-ipv4 2>/dev/null || echo 'Unknown')"
      
      # Wait for network and system to be ready
      echo "Waiting for system readiness..."
      sleep 30
      
      # Test network connectivity
      echo "=== Network Connectivity Test ==="
      test_connectivity() {
        local target=$1
        local name=$2
        local max_retries=5
        
        for i in $(seq 1 $max_retries); do
          if timeout 10 ping -c 2 "$target" >/dev/null 2>&1; then
            echo "✓ $name - reachable (attempt $i/$max_retries)"
            return 0
          else
            echo "⚠ $name - attempt $i/$max_retries failed"
            sleep 10
          fi
        done
        echo "✗ $name - not reachable after $max_retries attempts"
        return 1
      }
      
      test_connectivity "8.8.8.8" "Google DNS"
      test_connectivity "github.com" "GitHub"
      
      # Install RKE2
      echo "=== Installing RKE2 ==="
      if ! which rke2 >/dev/null 2>&1; then
        echo "Downloading and installing RKE2..."
        curl -sfL https://get.rke2.io | sh -
      else
        echo "RKE2 already installed"
      fi
      
      # Setup work directory
      WORK_DIR="/home/ubuntu/"
      echo "Setting up work directory: $WORK_DIR"
      cd $WORK_DIR
      
      # Clean up any existing k8s-infra directory
      if [[ -d "k8s-infra" ]]; then
        echo "Removing existing k8s-infra directory"
        rm -rf k8s-infra
      fi
      
      # Clone repository with retry
      echo "=== Cloning k8s-infra repository ==="
      clone_repository() {
        local max_retries=5
        local retry_delay=15
        
        for attempt in $(seq 1 $max_retries); do
          echo "Git clone attempt $attempt/$max_retries..."
          
          if timeout 300 git clone ${k8s_infra_repo_url} -b ${k8s_infra_branch}; then
            echo "✓ Git clone successful on attempt $attempt"
            return 0
          else
            echo "✗ Git clone failed on attempt $attempt"
            rm -rf k8s-infra 2>/dev/null || true
            
            if [ $attempt -lt $max_retries ]; then
              echo "Waiting $retry_delay seconds before retry..."
              sleep $retry_delay
              retry_delay=$((retry_delay + 10))
            fi
          fi
        done
        
        echo "Git clone failed after $max_retries attempts"
        return 1
      }
      
      if ! clone_repository; then
        echo "Failed to clone k8s-infra repository"
        exit 1
      fi
      
      echo "Successfully cloned k8s-infra repository"
      
      # Setup RKE2 config directory
      RKE2_CONFIG_DIR="/etc/rancher/rke2"
      echo "Setting up RKE2 config directory: $RKE2_CONFIG_DIR"
      mkdir -p $RKE2_CONFIG_DIR
      chown -R 1000:1000 $RKE2_CONFIG_DIR
      
      # Change to RKE2 location
      RKE2_LOCATION="/home/ubuntu/k8s-infra/k8-cluster/on-prem/rke2/"
      echo "Changing to RKE2 location: $RKE2_LOCATION"
      cd $RKE2_LOCATION
      
      # Skip if config already exists
      if [[ -f "$RKE2_CONFIG_DIR/config.yaml" ]]; then
        echo "RKE2 config file already exists: $RKE2_CONFIG_DIR/config.yaml"
        exit 0
      fi
      
      # Determine node role and setup config
      echo "=== Configuring RKE2 Node Role ==="
      NODE_NAME="${node_name}"
      echo "Node name: $NODE_NAME"
      
      if [[ "$NODE_NAME" == *"CONTROL-PLANE-NODE-1"* ]]; then
        echo "Configuring as PRIMARY CONTROL PLANE NODE"
        RKE2_SERVICE="rke2-server"
        cp rke2-server-control-plane-primary.conf.template $RKE2_CONFIG_DIR/config.yaml
      elif [[ "$NODE_NAME" == *"CONTROL-PLANE-NODE"* ]]; then
        echo "Configuring as SUBSEQUENT CONTROL PLANE NODE"
        RKE2_SERVICE="rke2-server"
        cp rke2-server-control-plane.subsequent.conf.template $RKE2_CONFIG_DIR/config.yaml
      elif [[ "$NODE_NAME" == *"ETCD-NODE"* ]]; then
        echo "Configuring as ETCD NODE"
        RKE2_SERVICE="rke2-agent"
        cp rke2-etcd-agents.conf.template $RKE2_CONFIG_DIR/config.yaml
      else
        echo "Configuring as WORKER NODE"
        RKE2_SERVICE="rke2-agent"
        cp rke2-agents.conf.template $RKE2_CONFIG_DIR/config.yaml
      fi
      
      # Configure RKE2 settings
      cd $RKE2_CONFIG_DIR
      sed -i "s/<configure-some-token-here>/${k8s_token}/g" $RKE2_CONFIG_DIR/config.yaml
      sed -i "s/<node-name>/${node_name}/g" $RKE2_CONFIG_DIR/config.yaml
      sed -i "s/<node-internal-ip>/${internal_ip}/g" $RKE2_CONFIG_DIR/config.yaml
      sed -i "s/<primary-server-ip>/${control_plane_node_1}/g" $RKE2_CONFIG_DIR/config.yaml
      sed -i "s/<cluster-name>/${cluster_domain}/g" $RKE2_CONFIG_DIR/config.yaml
      
      echo "RKE2 configuration completed"
      echo "Config file contents:"
      cat $RKE2_CONFIG_DIR/config.yaml
      
      # Start RKE2 service
      echo "=== Starting RKE2 Service ==="
      echo "Enabling and starting RKE2 service: $RKE2_SERVICE"
      
      systemctl enable $RKE2_SERVICE
      systemctl start $RKE2_SERVICE
      
      # Wait for RKE2 to initialize
      echo "Waiting for RKE2 to initialize..."
      for i in {1..20}; do
        echo "Check $i/20: Waiting 30 seconds..."
        sleep 30
        
        if systemctl is-active --quiet $RKE2_SERVICE 2>/dev/null; then
          echo "✓ RKE2 service is active"
          if [[ -f "$RKE2_CONFIG_DIR/rke2.yaml" ]]; then
            echo "✓ RKE2 config file exists"
            break
          else
            echo "- RKE2 config file not yet created"
          fi
        else
          echo "- RKE2 service not yet active"
        fi
        
        if [[ $i -eq 20 ]]; then
          echo "RKE2 failed to start after 10 minutes"
          systemctl status $RKE2_SERVICE || true
          journalctl -u $RKE2_SERVICE --no-pager -n 30 || true
          exit 1
        fi
      done
      
      # Setup kubectl if this is a control plane node
      if [[ -f "$RKE2_CONFIG_DIR/rke2.yaml" ]]; then
        echo "Setting up kubectl configuration..."
        cp /var/lib/rancher/rke2/bin/kubectl /bin/kubectl
        mkdir -p /home/ubuntu/.kube/
        cat "$RKE2_CONFIG_DIR/rke2.yaml" | sed "s/127.0.0.1/${internal_ip}/g" | sed "s/default/${cluster_domain}/g" > /home/ubuntu/.kube/${node_name}.yaml
        chown -R ubuntu:ubuntu /home/ubuntu/.kube/*
        chmod -R 444 /home/ubuntu/.kube/*.yaml
        chmod +x /bin/kubectl
        echo "kubectl configuration completed successfully"
      fi
      
      echo "=== RKE2 Cloud-Init Setup Completed Successfully ==="
      echo "Setup completed at: $(date)"

# Set environment variables for the script
bootcmd:
  - echo "Starting RKE2 Cloud-Init setup..."

runcmd:
  # Update environment variables in /etc/environment
  - echo "ENV_VAR_FILE=/etc/environment" >> /etc/environment
  - echo "CONTROL_PLANE_NODE_1=${control_plane_node_1}" >> /etc/environment
  - echo "WORK_DIR=/home/ubuntu/" >> /etc/environment
  - echo "RKE2_CONFIG_DIR=/etc/rancher/rke2" >> /etc/environment
  - echo "INSTALL_RKE2_VERSION=v1.28.9+rke2r1" >> /etc/environment
  - echo "K8S_INFRA_REPO_URL=${k8s_infra_repo_url}" >> /etc/environment
  - echo "K8S_INFRA_BRANCH=${k8s_infra_branch}" >> /etc/environment
  - echo "RKE2_LOCATION=/home/ubuntu/k8s-infra/k8-cluster/on-prem/rke2/" >> /etc/environment
  - echo "K8S_CLUSTER_PRIVATE_IPS_STR=${k8s_cluster_private_ips_str}" >> /etc/environment
  - echo "K8S_TOKEN=${k8s_token}" >> /etc/environment
  - echo "CLUSTER_DOMAIN=${cluster_domain}" >> /etc/environment
  - echo "NODE_NAME=${node_name}" >> /etc/environment
  - echo "INTERNAL_IP=${internal_ip}" >> /etc/environment
  # Run the setup script
  - /tmp/rke2-cloud-init-setup.sh

# Output logs for debugging
final_message: "RKE2 Cloud-Init setup completed. Check /var/log/rke2-cloud-init.log for details."
