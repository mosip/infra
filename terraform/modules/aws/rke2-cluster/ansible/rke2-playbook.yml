---
# Global variables shared across all plays
- name: Set Global Variables
  hosts: all
  gather_facts: no
  tasks:
    - name: Generate cluster token (deterministic based on cluster name)
      set_fact:
        cluster_token: "{{ cluster_name | hash('md5') | truncate(32, True, '') }}"
        cacheable: yes

# Play 1: Install Primary Control Plane Node FIRST (Sequential)
- name: Install Primary RKE2 Control Plane Node
  hosts: control_plane[0]  # Only the first control plane node
  become: yes
  gather_facts: yes  # Enable fact gathering to get ansible_default_ipv4
  serial: 1  # Ensure only one node runs at a time
  vars:
    rke2_version: "{{ install_rke2_version | default('v1.28.9+rke2r1') }}"
    rke2_config_dir: "/etc/rancher/rke2"
    rke2_data_dir: "/var/lib/rancher/rke2"
    env_file_path: "/etc/environment"
    log_file: "/tmp/rke2-setup.log"

  tasks:
    - name: Check if PRIMARY RKE2 server is already running
      systemd:
        name: rke2-server
      register: primary_rke2_status
      failed_when: false

    - name: Skip PRIMARY installation if already active
      block:
        - name: Log PRIMARY already active
          debug:
            msg: "🔄 PRIMARY RKE2 server is already active - skipping primary installation"
        
        - name: Log PRIMARY skip to file
          lineinfile:
            path: "{{ log_file }}"
            line: "=== PRIMARY Control Plane ALREADY ACTIVE - Skipped at {{ ansible_date_time.iso8601 }} ==="
            create: yes
        
        - name: End PRIMARY play early
          meta: end_play
      when: primary_rke2_status.status is defined and primary_rke2_status.status.ActiveState == "active"

    - name: Set PRIMARY control plane service type
      set_fact:
        rke2_service: "rke2-server"

    - name: "🚀 GITHUB ACTIONS DEBUG - Manual fact gathering with timeout"
      setup:
        gather_subset:
          - "!all"
          - "min"
          - "network"
          - "hardware"
      async: 300  # 5 minute timeout
      poll: 10
      register: fact_gathering_result

    - name: Get primary control plane IP
      set_fact:
        primary_control_plane_ip: "{{ hostvars[groups['control_plane'][0]]['ansible_default_ipv4']['address'] }}"

    - name: "🔍 GITHUB ACTIONS DEBUG - Show basic node information"
      debug:
        msg:
          - "=== RKE2 PRIMARY CONTROL PLANE INSTALLATION ==="
          - "Target Host: {{ inventory_hostname }}"
          - "Ansible Host: {{ ansible_host }}"
          - "Target IP: {{ ansible_default_ipv4.address | default('Not detected yet') }}"
          - "OS: {{ ansible_os_family | default('Unknown') }} {{ ansible_distribution | default('Unknown') }}"
          - "Architecture: {{ ansible_architecture | default('Unknown') }}"
          - "Timestamp: {{ ansible_date_time.iso8601 | default('Not available') }}"
          - "RKE2 Version: {{ rke2_version }}"
          - "=============================================="

    - name: "🔍 GITHUB ACTIONS DEBUG - System Information"
      debug:
        msg:
          - "OS: {{ ansible_os_family | default('Unknown') }} {{ ansible_distribution | default('Unknown') }} {{ ansible_distribution_version | default('Unknown') }}"
          - "Kernel: {{ ansible_kernel | default('Unknown') }}"
          - "Architecture: {{ ansible_architecture | default('Unknown') }}"
          - "Memory: {{ ansible_memtotal_mb | default(0) }}MB"
          - "CPUs: {{ ansible_processor_vcpus | default(0) }}"
          - "Disk Space: {{ ansible_mounts[0].size_total | default(0) | human_readable }}"
      when: fact_gathering_result is succeeded

    - name: "🌐 GITHUB ACTIONS DEBUG - Network Information"
      debug:
        msg:
          - "Hostname: {{ ansible_hostname | default('Unknown') }}"
          - "FQDN: {{ ansible_fqdn | default('Unknown') }}"
          - "Default Gateway: {{ ansible_default_ipv4.gateway | default('Not detected') }}"
          - "DNS Servers: {{ ansible_dns.nameservers | default(['Not detected']) }}"
      when: fact_gathering_result is succeeded

    - name: "🔧 GITHUB ACTIONS DEBUG - Basic node readiness check"
      shell: |
        echo "=== Node Readiness Check ==="
        echo "Hostname: $(hostname)"
        echo "Current user: $(whoami)"
        echo "Python version: $(python3 --version 2>&1)"
        echo "Disk space: $(df -h / | tail -1)"
        echo "Memory: $(free -h | grep Mem)"
        echo "Network interfaces: $(ip -o link show | wc -l)"
        echo "Can resolve internet: $(nslookup google.com 8.8.8.8 > /dev/null 2>&1 && echo 'YES' || echo 'NO')"
        echo "=== End Check ==="
      register: readiness_check
      timeout: 60

    - name: "📋 GITHUB ACTIONS DEBUG - Show readiness check results"
      debug:
        var: readiness_check.stdout_lines

    - name: Set error handling for bash
      set_fact:
        bash_opts: "set -e && set -o errexit && set -o nounset && set -o errtrace && set -o pipefail"

    - name: Create log file
      file:
        path: "{{ log_file }}"
        state: touch
        mode: '0644'

    - name: Log start of PRIMARY installation
      lineinfile:
        path: "{{ log_file }}"
        line: "=== PRIMARY Control Plane RKE2 Setup Started at {{ ansible_date_time.iso8601 }} ==="

    - name: Update system packages
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - curl
          - git
          - unzip
        state: present

    - name: Create RKE2 config directory
      file:
        path: "{{ rke2_config_dir }}"
        state: directory
        mode: '0755'

    - name: Set environment variables for PRIMARY
      blockinfile:
        path: "{{ env_file_path }}"
        block: |
          export CLUSTER_NAME={{ cluster_name }}
          export CLUSTER_ENV_DOMAIN={{ cluster_env_domain }}
          export NODE_NAME={{ inventory_hostname }}
          export INTERNAL_IP={{ ansible_default_ipv4.address }}
          export K8S_INFRA_REPO_URL={{ k8s_infra_repo_url }}
          export K8S_INFRA_BRANCH={{ k8s_infra_branch }}
          export ENABLE_RANCHER_IMPORT={{ enable_rancher_import }}
          export RANCHER_IMPORT_URL={{ rancher_import_url }}
          export RKE2_SERVICE=rke2-server
        marker: "# {mark} ANSIBLE MANAGED BLOCK - RKE2 VARS PRIMARY"

    - name: Download and install RKE2
      shell: |
        {{ bash_opts }}
        export INSTALL_RKE2_VERSION="{{ rke2_version }}"
        curl -sfL https://get.rke2.io | sh -
      args:
        executable: /bin/bash
        creates: /usr/local/bin/rke2

    - name: Clone k8s-infra repository
      git:
        repo: "{{ k8s_infra_repo_url }}"
        dest: "/home/ubuntu/k8s-infra"
        version: "{{ k8s_infra_branch }}"
        force: no
        update: yes
      become_user: ubuntu
      ignore_errors: yes

    - name: Copy RKE2 config templates
      shell: |
        {{ bash_opts }}
        cd /home/ubuntu/k8s-infra/k8-cluster/on-prem/rke2
        cp -n *.template {{ rke2_config_dir }}/ || true
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Configure PRIMARY control plane config
      copy:
        src: "{{ rke2_config_dir }}/rke2-server-control-plane-primary.conf.template"
        dest: "{{ rke2_config_dir }}/config.yaml"
        remote_src: yes
        force: no
        backup: yes

    - name: Replace placeholders in PRIMARY config
      replace:
        path: "{{ rke2_config_dir }}/config.yaml"
        regexp: "{{ item.regexp }}"
        replace: "{{ item.replace }}"
      loop:
        - { regexp: '<configure-some-token-here>', replace: '{{ cluster_token }}' }
        - { regexp: '<node-name>', replace: '{{ inventory_hostname }}' }
        - { regexp: '<node-internal-ip>', replace: '{{ ansible_default_ipv4.address }}' }

    - name: Enable and start PRIMARY RKE2 server
      systemd:
        name: rke2-server
        enabled: yes
        state: started

    - name: Wait for PRIMARY RKE2 server to stabilize
      wait_for:
        timeout: 180  # 3 minutes for primary to be ready

    - name: Verify PRIMARY RKE2 server service is active
      systemd:
        name: rke2-server
        state: started
      register: rke2_service_status
      
    - name: Check PRIMARY RKE2 server status with systemctl
      shell: sudo systemctl status rke2-server --no-pager
      register: rke2_status_output
      failed_when: false
      
    - name: Display PRIMARY RKE2 server status
      debug:
        msg: "{{ rke2_status_output.stdout_lines }}"

    - name: Wait for PRIMARY kubeconfig to be available
      wait_for:
        path: /etc/rancher/rke2/rke2.yaml
        timeout: 120

    - name: Setup kubectl configuration on PRIMARY
      block:
        - name: Copy kubectl binary
          copy:
            src: "/var/lib/rancher/rke2/bin/kubectl"
            dest: "/bin/kubectl"
            remote_src: yes
            mode: '0755'
            force: no

        - name: Create .kube directory
          file:
            path: "/home/ubuntu/.kube"
            state: directory
            owner: ubuntu
            group: ubuntu
            mode: '0755'

        - name: Generate kubeconfig for PRIMARY
          shell: |
            cat /etc/rancher/rke2/rke2.yaml | \
            sed "s/127.0.0.1/{{ ansible_default_ipv4.address }}/g" | \
            sed "s/default/{{ cluster_name }}/g" > \
            "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"
          args:
            executable: /bin/bash
            creates: "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"

        - name: Set kubeconfig ownership and permissions
          file:
            path: "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"
            owner: ubuntu
            group: ubuntu
            mode: '0444'

    - name: Verify PRIMARY cluster is ready
      shell: kubectl get nodes
      retries: 10
      delay: 15
      register: kubectl_result
      until: kubectl_result.rc == 0
      become_user: ubuntu
      environment:
        KUBECONFIG: "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"

    - name: Log PRIMARY completion
      lineinfile:
        path: "{{ log_file }}"
        line: "=== PRIMARY Control Plane Setup Completed Successfully at {{ ansible_date_time.iso8601 }} ==="

# Play 2: Install ALL OTHER Nodes in PARALLEL (after primary is ready)
- name: Install All Other RKE2 Nodes in Parallel
  hosts: control_plane[1:],etcd,workers  # All nodes EXCEPT the first control plane
  become: yes
  gather_facts: yes
  strategy: free  # This enables parallel execution across all hosts
  vars:
    rke2_version: "{{ install_rke2_version | default('v1.28.9+rke2r1') }}"
    rke2_config_dir: "/etc/rancher/rke2"
    rke2_data_dir: "/var/lib/rancher/rke2"
    env_file_path: "/etc/environment"
    log_file: "/tmp/rke2-setup.log"

  tasks:
    - name: Determine expected RKE2 service for this node
      set_fact:
        expected_rke2_service: "{{ 'rke2-server' if node_role == 'control_plane' else 'rke2-agent' }}"

    - name: Check if RKE2 service is already running
      systemd:
        name: "{{ expected_rke2_service }}"
      register: node_rke2_status
      failed_when: false

    - name: Skip node installation if already active
      block:
        - name: Log node already active
          debug:
            msg: "🔄 {{ node_role | upper }} RKE2 service {{ expected_rke2_service }} is already active - skipping installation"
        
        - name: Log node skip to file
          lineinfile:
            path: "{{ log_file }}"
            line: "=== {{ node_role | upper }} {{ expected_rke2_service }} ALREADY ACTIVE - Skipped at {{ ansible_date_time.iso8601 }} ==="
            create: yes
        
        - name: End node play early
          meta: end_host
      when: node_rke2_status.status is defined and node_rke2_status.status.ActiveState == "active"
    - name: Set error handling for bash
      set_fact:
        bash_opts: "set -e && set -o errexit && set -o nounset && set -o errtrace && set -o pipefail"

    - name: Create log file
      file:
        path: "{{ log_file }}"
        state: touch
        mode: '0644'

    - name: Log start of PARALLEL installation
      lineinfile:
        path: "{{ log_file }}"
        line: "=== {{ node_role | upper }} RKE2 Setup Started at {{ ansible_date_time.iso8601 }} ==="

    - name: Update system packages
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install required packages
      apt:
        name:
          - curl
          - git
          - unzip
        state: present

    - name: Create RKE2 config directory
      file:
        path: "{{ rke2_config_dir }}"
        state: directory
        mode: '0755'

    - name: Set environment variables
      blockinfile:
        path: "{{ env_file_path }}"
        block: |
          export CLUSTER_NAME={{ cluster_name }}
          export CLUSTER_ENV_DOMAIN={{ cluster_env_domain }}
          export NODE_NAME={{ inventory_hostname }}
          export INTERNAL_IP={{ ansible_default_ipv4.address }}
          export K8S_INFRA_REPO_URL={{ k8s_infra_repo_url }}
          export K8S_INFRA_BRANCH={{ k8s_infra_branch }}
          export ENABLE_RANCHER_IMPORT={{ enable_rancher_import }}
          export RANCHER_IMPORT_URL={{ rancher_import_url }}
        marker: "# {mark} ANSIBLE MANAGED BLOCK - RKE2 VARS"

    - name: Download and install RKE2
      shell: |
        {{ bash_opts }}
        export INSTALL_RKE2_VERSION="{{ rke2_version }}"
        curl -sfL https://get.rke2.io | sh -
      args:
        executable: /bin/bash
        creates: /usr/local/bin/rke2

    - name: Clone k8s-infra repository
      git:
        repo: "{{ k8s_infra_repo_url }}"
        dest: "/home/ubuntu/k8s-infra"
        version: "{{ k8s_infra_branch }}"
        force: no
        update: yes
      become_user: ubuntu
      ignore_errors: yes

    - name: Copy RKE2 config templates
      shell: |
        {{ bash_opts }}
        cd /home/ubuntu/k8s-infra/k8-cluster/on-prem/rke2
        cp -n *.template {{ rke2_config_dir }}/ || true
      args:
        executable: /bin/bash
      ignore_errors: yes

    - name: Configure subsequent control plane nodes
      block:
        - name: Copy subsequent control plane config
          copy:
            src: "{{ rke2_config_dir }}/rke2-server-control-plane.subsequent.conf.template"
            dest: "{{ rke2_config_dir }}/config.yaml"
            remote_src: yes
            force: no
            backup: yes

        - name: Replace placeholders in subsequent control plane config
          replace:
            path: "{{ rke2_config_dir }}/config.yaml"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: '<configure-some-token-here>', replace: '{{ cluster_token }}' }
            - { regexp: '<node-name>', replace: '{{ inventory_hostname }}' }
            - { regexp: '<node-internal-ip>', replace: '{{ ansible_default_ipv4.address }}' }
            - { regexp: '<primary-server-ip>', replace: '{{ hostvars[groups["control_plane"][0]]["ansible_default_ipv4"]["address"] }}' }
            
        - name: Set RKE2 service type for subsequent control plane
          lineinfile:
            path: "{{ env_file_path }}"
            line: "export RKE2_SERVICE=rke2-server"
            
        - name: Set service variable for subsequent control plane
          set_fact:
            rke2_service: "rke2-server"
      when: node_role == "control_plane" and not (is_primary | default(false))

    - name: Configure ETCD nodes
      block:
        - name: Copy ETCD config
          copy:
            src: "{{ rke2_config_dir }}/rke2-etcd-agents.conf.template"
            dest: "{{ rke2_config_dir }}/config.yaml"
            remote_src: yes
            force: no
            backup: yes

        - name: Replace placeholders in ETCD config
          replace:
            path: "{{ rke2_config_dir }}/config.yaml"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: '<configure-some-token-here>', replace: '{{ cluster_token }}' }
            - { regexp: '<node-name>', replace: '{{ inventory_hostname }}' }
            - { regexp: '<node-internal-ip>', replace: '{{ ansible_default_ipv4.address }}' }
            - { regexp: '<primary-server-ip>', replace: '{{ hostvars[groups["control_plane"][0]]["ansible_default_ipv4"]["address"] }}' }
            
        - name: Set RKE2 service type for ETCD
          lineinfile:
            path: "{{ env_file_path }}"
            line: "export RKE2_SERVICE=rke2-agent"
            
        - name: Set service variable for ETCD
          set_fact:
            rke2_service: "rke2-agent"
      when: node_role == "etcd"

    - name: Configure worker nodes
      block:
        - name: Copy worker config
          copy:
            src: "{{ rke2_config_dir }}/rke2-agents.conf.template"
            dest: "{{ rke2_config_dir }}/config.yaml"
            remote_src: yes
            force: no
            backup: yes

        - name: Replace placeholders in worker config
          replace:
            path: "{{ rke2_config_dir }}/config.yaml"
            regexp: "{{ item.regexp }}"
            replace: "{{ item.replace }}"
          loop:
            - { regexp: '<configure-some-token-here>', replace: '{{ cluster_token }}' }
            - { regexp: '<node-name>', replace: '{{ inventory_hostname }}' }
            - { regexp: '<node-internal-ip>', replace: '{{ ansible_default_ipv4.address }}' }
            - { regexp: '<primary-server-ip>', replace: '{{ hostvars[groups["control_plane"][0]]["ansible_default_ipv4"]["address"] }}' }
            
        - name: Set RKE2 service type for workers
          lineinfile:
            path: "{{ env_file_path }}"
            line: "export RKE2_SERVICE=rke2-agent"
            
        - name: Set service variable for workers
          set_fact:
            rke2_service: "rke2-agent"
      when: node_role == "worker"

    - name: Enable and start RKE2 service
      systemd:
        name: "{{ rke2_service }}"
        enabled: yes
        state: started

    - name: Wait for RKE2 service to stabilize
      wait_for:
        timeout: 120

    - name: Verify RKE2 service is active
      systemd:
        name: "{{ rke2_service }}"
        state: started
      register: rke2_service_status
      
    - name: Check RKE2 service status with systemctl
      shell: sudo systemctl status {{ rke2_service }} --no-pager
      register: rke2_status_output
      failed_when: false
      
    - name: Display RKE2 service status
      debug:
        msg: "{{ rke2_status_output.stdout_lines }}"

    - name: Setup kubectl configuration (for control plane nodes only)
      block:
        - name: Copy kubectl binary
          copy:
            src: "/var/lib/rancher/rke2/bin/kubectl"
            dest: "/bin/kubectl"
            remote_src: yes
            mode: '0755'
            force: no

        - name: Create .kube directory
          file:
            path: "/home/ubuntu/.kube"
            state: directory
            owner: ubuntu
            group: ubuntu
            mode: '0755'

        - name: Generate kubeconfig
          shell: |
            cat /etc/rancher/rke2/rke2.yaml | \
            sed "s/127.0.0.1/{{ ansible_default_ipv4.address }}/g" | \
            sed "s/default/{{ cluster_name }}/g" > \
            "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"
          args:
            executable: /bin/bash
            creates: "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"

        - name: Set kubeconfig ownership and permissions
          file:
            path: "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"
            owner: ubuntu
            group: ubuntu
            mode: '0444'
      when: node_role == "control_plane"

    - name: Log completion
      lineinfile:
        path: "{{ log_file }}"
        line: "=== {{ node_role | upper }} Setup Completed Successfully at {{ ansible_date_time.iso8601 }} ==="

# Play 3: Final cluster verification and Rancher import (on primary only)
- name: Final Cluster Setup and Rancher Import
  hosts: control_plane[0]  # Only on primary control plane
  become: yes
  gather_facts: no
  tasks:
    - name: Wait for all nodes to join the cluster
      shell: kubectl get nodes --no-headers | wc -l
      retries: 20
      delay: 15
      register: node_count
      until: node_count.stdout | int >= (groups['rke2_cluster'] | length)
      become_user: ubuntu
      environment:
        KUBECONFIG: "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"

    - name: Display cluster status
      shell: kubectl get nodes -o wide
      register: cluster_status
      become_user: ubuntu
      environment:
        KUBECONFIG: "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"

    - name: Show cluster nodes
      debug:
        msg: "{{ cluster_status.stdout_lines }}"

    - name: Execute Rancher import (if enabled)
      shell: "{{ rancher_import_url }}"
      when: enable_rancher_import | bool
      become_user: ubuntu
      environment:
        KUBECONFIG: "/home/ubuntu/.kube/{{ inventory_hostname }}.yaml"
      ignore_errors: yes

    - name: Final success message
      debug:
        msg: "🎉 RKE2 Cluster installation completed successfully! Primary first, then all others in parallel."
